!<arch>
0-isupper.c/    0           0     0     644     207       `
#include "main.h"

/**
 * _isupper - functionc parametr
 *@c :parameter
 * Return: 1 if uppercase 0 if lowercase.
 */

int _isupper(int c)
{
	if (c >= 'A' &&  c <= 'Z')
		return (1);
		else
			return (0);
}

0-memset.c/     0           0     0     644     286       `
#include "main.h"
/**
 *  _memset- fills memory with a constant byte.
 *  @s: Pointer
 *  @b: constant byte
 *  @n: number of bytes of the memory
 *  Return: pointer
 */

char *_memset(char *s, char b, unsigned int n)
{

	char *p = s;

	while (n-- > 0)
	{
		*p++ = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     307       `
#include "main.h"
/**
 * _strcat - concatenates two strings.
 * @dest: destination
 * @src: source
 * Return: dest
*/

char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	j = 0;

	while (dest[i])
		i++;
	while (src[j])
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';

return (dest);
}

1-isdigit.c/    0           0     0     644     253       `
#include "main.h"
/**
 * _isdigit - Entry point
 * Description:  function that checks for a digit
 * @c: check for a digit
 * Return: 1 true 0 otherwise
*/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     295       `
#include "main.h"
/**
 * _memcpy- copies memory area.
 * @dest: estination
 * @src: source
 * @n: number of bytes
 * Return: dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	char *psrc = src;
	char *pdest = dest;

	while (n-- > 0)
	{
		*pdest++ = *psrc++;
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     357       `
#include "main.h"
/**
 * _strncat - concatenates two strings.
 * @dest: destination
 * @src: source
 * @n:  bytes from src
 * Return: dest
*/

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;

	while (dest[i])
		i++;
	dest[i] = ' ';
	while (src[j] && j < n)
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);


}

2-strchr.c/     0           0     0     644     278       `
#include "main.h"
/**
 * _strchr - locates a character in a string.
 * @s: String
 * @c: character
 * Return: NULL
 */

char *_strchr(char *s, char c)
{

	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (*s == c)
	{
		return (s);
	}

	return (NULL);
}
2-strlen.c/     0           0     0     644     227       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: str to calculate
 *
 * Return: the length of the string
 */

int _strlen(char *s)
{
	int i;

	i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}

2-strncpy.c/    0           0     0     644     368       `
#include "main.h"

/**
 * _strncpy - copies n bytes from src to dest
 * @dest: the destination string
 * @src: the source string
 * @n: the number of bytes
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}
3-islower.c/    0           0     0     644     193       `
#include "main.h"

/**
 * _islower - checks lowercase
 * c: is the variable
 * Return: 1 if lowercase if not 0
 */

int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
return (0);
}

3-puts.c/       0           0     0     644     255       `
#include "main.h"

/**
 * _puts - print a string to stdout
 * @str: char array string type
 * Description: Can only use _putchar to print
 */

void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     287       `
#include "main.h"
/**
 * _strcmp - compares two strings.
 * @s1: First string
 * @s2: Second string
 * Return: s1[i] - s2[i]
 */


int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] == s2[i])
	{
		if (s1[i] == '\0')
		{
			return (0);
		}
		i++;

	}
	return (s1[i] - s2[i]);
}

3-strspn.c/     0           0     0     644     439       `
#include "main.h"

/**
  * _strspn - gets the length of a prefix substring
  * @s: the string
  * @accept: the prefix string
  *
  * Return: the length of the prefix
  */
unsigned int _strspn(char *s, char *accept)
{
	int i = 0;
	int j = 0;
	int length = 0;

	while (*(s + i))
	{
		while (*(accept + j))
		{
			if (*(s + i) == *(accept + j))
			{
				length++;
				j = 0;
				i++;
			}
			else
				j++;
		}
		break;
	}
	return (length);
}

4-isalpha.c/    0           0     0     644     219       `
#include "main.h"

/**
 * _isalpha - checks alphabets
 * @c: is the variable
 * Return: 1 if alphabet if not 0
 */

int _isalpha(int c)
{
if ((c >= 97 && c <= 122) || (c >= 65 && c <= 90))
{
return (1);
}
return (0);
}

4-strpbrk.c/    0           0     0     644     420       `
#include "main.h"

/**
  * _strpbrk - searches a string for any of a set of bytes
  * @s: the string
  * @accept: the set of bytes
  *
  * Return: pointer to the first accurrence of any bytes in the s
  */
char *_strpbrk(char *s, char *accept)
{
	int i = 0;
	int j = 0;

	while (*(s + i))
	{
		while (*(accept + j))
		{
			if (*(s + i) == *(accept + j))
				return (s + i);
			j++;
		}
		i++;
		j = 0;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     796       `
#include "main.h"

/**
  * _strlen - calculate the len of str
  * @s: the string
  *
  * Return: the length of the string
  */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i))
		i++;
	return (i);
}

/**
  * _strstr - locates a substring
  * @haystack: the string
  * @needle: the substring
  *
  * Return: pointer to the beginning of the located substring or null
  */
char *_strstr(char *haystack, char *needle)
{
	int needle_len = 0;
	int matches = 0;

	needle_len = _strlen(needle);
	while (*haystack && *needle)
	{
		if (*haystack != *needle)
		{
			needle -= matches;
			haystack -= (matches - 1);
			matches = 0;
			continue;
		}
		haystack++;
		needle++;
		matches++;
		if (matches == needle_len)
			break;
	}
	if (matches == needle_len)
		return (haystack - matches);
	return (0);
}
6-abs.c/        0           0     0     644     184       `
#include "main.h"

/**
 * _abs - checks the absolute value
 * @n: is the variable
 * Return: 0 or absolute value of c
 */

int _abs(int n)
{
if (n >= 0)
{
return (n);
}
return (-n);
}
9-strcpy.c/     0           0     0     644     499       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src (source)
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest (destination)
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

atoi.c/         0           0     0     644     55        `
#include "main.h"

int _atoi(char *s)
{
	
	return 0;
}

_putchar.c/     0           0     0     644     183       `
#include <unistd.h>

/**
 * _putchar - write the character to stdout
 * the character to print is ch
 * Return: 1 (success)
 */

int _putchar(char ch)
{

return (write(1, &ch, 1));
}

